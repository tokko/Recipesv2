import java.util.regex.Pattern

// If you would like more information on the gradle-appengine-plugin please refer to the github page
// https://github.com/GoogleCloudPlatform/gradle-appengine-plugin

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.google.appengine:gradle-appengine-plugin:1.9.18'
        // classpath 'me.tatarka:gradle-retrolambda:3.2.0'

    }
}

repositories {
    jcenter();
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'appengine'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

dependencies {
    appengineSdk 'com.google.appengine:appengine-java-sdk:1.9.18'
    compile 'com.google.appengine:appengine-endpoints:1.9.18'
    compile 'com.google.appengine:appengine-endpoints-deps:1.9.18'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'com.googlecode.objectify:objectify:4.0b3'
    compile 'com.ganyo:gcm-server:1.0.2'
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.appengine:appengine-testing:1.9.21'
    testCompile 'com.google.appengine:appengine-api-stubs:1.9.21'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.inject.extensions:guice-servlet:4.0'
    compile 'org.mockito:mockito-all:2.0.2-beta'
}

def runTasks = gradle.startParameter.taskNames
if ('appengineUpdate' in runTasks) {
    def appenginewebxml = file('/src/main/webapp/WEB-INF/appengine-web.xml')
    if (appenginewebxml.canRead()) {
        def xml = appenginewebxml.getText()
        def matcher = Pattern.compile('<version>v(\\d+)').matcher(xml)
        matcher.find()
        def currentVersion = matcher.group(1)
        def newVersion = currentVersion.toInteger() + 1
        xml = matcher.replaceAll('<version>v' + newVersion)
        appenginewebxml.write(xml);
        def constantsFile = file('/src/main/java/com/tokko/recipesv2/backend/endpoints/Constants.java')
        def code = constantsFile.getText()
        def m2 = Pattern.compile('API_VERSION = "v\\d+"').matcher(code)
        m2.find()
        code = m2.replaceAll('API_VERSION = "v' + newVersion + '"')
        constantsFile.write(code)
    }
}

appengine {
    downloadSdk = true
    appcfg {
        oauth2 = true
        httpAddress = "0.0.0.0"
    }
    endpoints {
        getClientLibsOnBuild = true
        getDiscoveryDocsOnBuild = true
    }
    /*
    app {
        id = 'river-pillar-94516'
        version = 2
    }
    */
}
