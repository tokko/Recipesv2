import java.util.regex.Pattern

buildscript {
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.0'
        classpath 'com.google.gms:google-services:1.3.0-beta1'
        classpath 'com.github.triplet.gradle:play-publisher:1.1.2'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
}
apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.triplet.play'

android {
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile rootProject.file("keystore.jks")
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
        debug {
            storeFile rootProject.file("keystore.jks")
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
    }

    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    task('increaseVersionCode') << {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = Integer.parseInt(matcher.group(1))
        def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
        manifestFile.write(manifestContent)
    }

    task('incrementVersionName') << {
        def manifestFile = file("src/main/AndroidManifest.xml")
        def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"")
        def manifestText = manifestFile.getText()
        def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
        matcherVersionNumber.find()
        def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
        def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
        def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
        def buildVersion = Integer.parseInt(matcherVersionNumber.group(4))
        def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion + "." + (buildVersion + 1)
        def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
        manifestFile.write(manifestContent)
    }

    tasks.whenTaskAdded { task ->
        if (task.name == 'publishRelease') {
            task.dependsOn 'increaseVersionCode'
            task.dependsOn 'incrementVersionName'
        }
    }

    play {
        serviceAccountEmail = '92588905880-fdolvkj29p3l637u5fgaa3jke0vksd17@developer.gserviceaccount.com'
        pk12File = file('key.p12')
        //   uploadImages = true
    }

    defaultConfig {
        applicationId "com.tokko.recipesv2"
        minSdkVersion 19
        targetSdkVersion 22
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
        debug {
            signingConfig signingConfigs.release
        }
        realBackend {
            signingConfig signingConfigs.release
            debuggable true
        }
        mock {
            debuggable true
            signingConfig signingConfigs.release
        }
    }
    dexOptions {
        incremental false
        preDexLibraries = false
        jumboMode = false
        javaMaxHeapSize "2048M"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
retrolambda {
    retrolambda {
        include 'Test', 'Debug', 'Release'
        oldJdk = System.getenv("JAVA7_HOME")
        javaVersion = JavaVersion.VERSION_1_7
    }
}

dependencies {
    repositories{
        jcenter()
    }

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.0'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.0'
   // Compile 'org.mockito:mockito-core:2.0.31-beta'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
    androidTestCompile('com.android.support.test:runner:0.3') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test:rules:0.3') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile 'joda-time:joda-time:2.8.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'org.mockito:mockito-core:2.0.31-beta'

    //androidTestCompile 'com.android.support.test:runner:0.3'
    provided 'org.roboguice:roboblender:3.0.1'
    compile 'org.roboguice:roboguice:3.0.1'
    compile 'com.google.android.gms:play-services:7.5.0'
    //compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.jakewharton:butterknife:6.1.0'
    compile 'com.annimon:stream:1.0.1'
    compile 'com.google.code.gson:gson:2.3.1'
    // compile 'com.android.support:support-v4:22.2.1'
    // compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(path: ':backend', configuration: 'android-endpoints')
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}